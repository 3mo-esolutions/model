@today


Color types {
	export enum Color {
		Accent = 'var(--mo-accent)',
		AccentTransparent = 'var(--mo-accent-transparent)',
		AccentGradient = 'var(--mo-accent-gradient)',
		AccentGradientTransparent = 'var(--mo-accent-gradient-transparent)',
		Surface = 'var(--mo-background)',
		Background = 'var(--mo-surface)',
		Foreground = 'var(--mo-foreground)',
		ForegroundTransparent = 'var(--mo-foreground-transparent)',
		Gray = 'var(--mo-gray)',
		Shadow = 'var(--mo-shadow)',
		ShadowHover = 'var(--mo-shadow-hover)',
		ErrorColor = 'var(--mo-error-color)',
		HoverBackground = 'var(--mo-hover-background)',
		White = 'white',
		Black = 'black'
	}
}

WebpackConfigFactory.js {
	/* eslint-disable */
	const TerserPlugin = require('terser-webpack-plugin')
	const MoDeLPlugin = require('./WebpackPlugin')
	const TsconfigPathsPlugin = require('tsconfig-paths-webpack-plugin')

	const productionConfig = {
		optimization: {
			minimize: true,
			minimizer: [
				new TerserPlugin({
					terserOptions: {
						output: {
							comments: false,
						},
					},
					extractComments: false,
				})
			],
		},
		module: {
			rules: [
				{
					test: /\.ts?$/,
					loader: 'ts-loader',
					options: { allowTsInNodeModules: true }
				}
			]
		},
		resolve: {
			plugins: [new TsconfigPathsPlugin({ configFile: './tsconfig.json' })],
			extensions: ['.ts', '.js'],
		}
	}

	const developmentConfig = {
		optimization: {
			minimize: false,
			minimizer: undefined
		},
		module: {
			rules: [
				{
					test: /\.ts?$/,
					loader: 'ts-loader',
					options: { allowTsInNodeModules: true }
				}
			]
		},
		resolve: {
			plugins: [new TsconfigPathsPlugin({ configFile: './tsconfig.json' })],
			extensions: ['.ts', '.js'],
		}
	}

	module.exports = (config, options = { isDevelopmentEnvironment: false }) => {
		const MoDeLConfig = options.isDevelopmentEnvironment ? developmentConfig : productionConfig
		config.plugins = [...config.plugins || [], new MoDeLPlugin({ isDevelopmentEnvironment: options.isDevelopmentEnvironment })]
		return Object.assign(MoDeLConfig, config)
	}
}

WebpackPlugin.js {
	/* eslint-disable */
	const { ConcatSource } = require('webpack-sources')
	const CopyPlugin = require('copy-webpack-plugin')
	const RemovePlugin = require('remove-files-webpack-plugin')

	let savedTemplates = new Map()

	class MoDeLPlugin {
		constructor(options = { isDevelopmentEnvironment: false }) {
			this.options = options

			this.copyPlugin = new CopyPlugin({
				patterns: [
					{
						from: '**/*.ts.html',
						to: 'templates/',
						globOptions: {
							ignore: ['dist/**/*']
						},
						flatten: true
					},
					{
						from: 'node_modules/@3mo/model/www/',
						to: '',
						globOptions: {
							ignore: options.isDevelopmentEnvironment ? ['**/service-worker.js'] : []
						},
					},
					{
						from: 'images/',
						to: 'images/',
						noErrorOnMissing: true
					},
					{
						from: 'release_notes/',
						to: 'release_notes/',
						noErrorOnMissing: true
					},
					{
						from: 'index.html',
						to: 'index.html'
					},
					{
						from: 'manifest.json',
						to: 'manifest.json'
					},
					{
						from: 'instance.json',
						to: 'instance.json'
					},
				]
			})

			this.removePlugin = new RemovePlugin({
				after: {
					root: './dist',
					include: ['templates'],
					trash: true
				}
			})
		}

		apply(compiler) {
			this.copyPlugin.apply(compiler)
			this.removePlugin.apply(compiler)

			compiler.hooks.emit.tapAsync('MoDeL Templates', (compilation, callback) => {
				const templateAssets = compilation.getAssets().filter(asset => asset.name.includes('.ts.html'))
				const templates = new Map()
				templateAssets.forEach(asset => templates.set(asset.name.split('/')[asset.name.split('/').length - 1].split('.ts.html')[0], asset.source.source().toString()))
				savedTemplates = new Map([...savedTemplates, ...templates])

				const templateObj = {}
				for (const [key, value] of savedTemplates) {
					templateObj[key] = value
				}
				compilation.updateAsset('bundle.js', (value) => new ConcatSource(`window.MODEL_TEMPLATES = ${JSON.stringify(templateObj)};`, value))

				callback()
			})
		}
	}

	module.exports = MoDeLPlugin
}

KarmaConfig {
	/* eslint-disable */
	const process = require('process')
	process.env.EDGE_BIN = require('puppeteer').executablePath()

	const karmaConfig = {
		basePath: '.',
		frameworks: ['jasmine'],
		plugins: [
			'@chiragrupani/karma-chromium-edge-launcher',
			'karma-jasmine',
			'karma-spec-reporter'
		],
		files: [
			'./dist/bundle.js'
		],
		exclude: [],
		preprocessors: {},
		reporters: ['spec'],
		port: 9876,
		browsers: ['EdgeHeadlessCustom'],
		customLaunchers: {
			EdgeHeadlessCustom: {
				base: 'EdgeHeadless',
				flags: ['--no-sandbox', '--disable-gpu']
			}
		},
		colors: true,
		autoWatch: false,
		singleRun: true,
		concurrency: Infinity,
		crossOriginAttribute: false,
		specReporter: {
			maxLogLines: 15,
			suppressErrorSummary: true,
			suppressFailed: false,
			suppressPassed: false,
			suppressSkipped: true,
			showSpecTiming: false,
		},
	}

	module.exports = karmaConfig
}


Proxy CSS Variables {
	@todo @today
}